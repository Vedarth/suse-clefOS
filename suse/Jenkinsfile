node('suse') {

    stage('Clone repository') {
        checkout scm
    }

    stage('Validation') {
            //Moving in to the directory to execute the commands
            dir('servicelayer') {
                
                    //Using the git command to check the difference between previous successful commit. ${GIT_PREVIOUS_SUCCESSFUL_COMMIT} is an environment variable comes with GIT Jenkins plugin
                    //There is a drawback though, if it is the first time you are running this job, this variable is not available and fails the build
                    //For the first time i had to use ${env.GIT_COMMIT} itself at both places to pass the build. A hack but worth it for future builds.

                    def strCount = sh(returnStdout: true, script: "git diff --name-only ${env.GIT_COMMIT} ${GIT_PREVIOUS_SUCCESSFUL_COMMIT} | grep suse | wc -l").trim()
                    if(strCount=="0") {
                        echo "Skipping build no files updated"
                        CONTINUE_BUILD = false
                    } else {
                        echo "Changes found in the suse directory"
                    }
                
            }
        }

    stage('Build image') {
        DOCKER_HOME = tool "docker"
        dir("suse"){
        sh "cd base && sudo ./config.sh && cd .."
        sh "mv base/Dockerfile ."
        sh "mv base/sles-15-docker.tar.xz ."
        def app3 = docker.build("vedarth/sles")
        sh "mv Dockerfile base/"
        sh "mv sles-15-docker.tar.xz base/"
        sh "mv django/Dockerfile ."
        def app = docker.build("vedarth/django")
        sh "mv Dockerfile django/"
        sh "mv redis/Dockerfile ."
        def app2 = docker.build("vedarth/redis")
        sh "mv Dockerfile redis/"
        sh "mv golang/Dockerfile ."
        sh "mv golang/go-wrapper ."
        def app4 = docker.build("vedarth/golang")
        sh "mv Dockerfile golang/"
        sh "mv go-wrapper golang/"
        sh "mv jupyter/Dockerfile ."
        def app5 = docker.build("vedarth/jupyter")
        sh "mv Dockerfile jupyter/"
        sh "mv mariadb/allow-skip-name.cnf ."
        sh "mv mariadb/docker-entrypoint.sh ."
        sh "mv mariadb/Dockerfile ."
        sh "mv mariadb/fix-permissions.sh ."
        def app6 = docker.build("vedarth/mariadb")
        sh "mv allow-skip-name.cnf mariadb/"
        sh "mv docker-entrypoint.sh mariadb/"
        sh "mv Dockerfile mariadb/"
        sh "mv fix-permissions.sh mariadb/"
        sh "mv nginx/Dockerfile ."
        def app7 = docker.build("vedarth/nginx")
        sh "mv Dockerfile nginx/"
        sh "mv nodejs/Dockerfile ."
        def app8 = docker.build("vedarth/nodejs")
        sh "mv Dockerfile nodejs/"
        sh "mv postgresql/Dockerfile ."
        sh "mv postgresql/postgresql-setup ."
        sh "mv postgresql/postgresql.conf ."
        sh "mv postgresql/start_postgres.sh ."
        sh "mv postgresql/supervisord.conf ."
        def app9 = docker.build("vedarth/postgresql")
        sh "mv Dockerfile postgresql/"
        sh "mv postgresql-setup postgresql/"
        sh "mv postgresql.conf postgresql/"
        sh "mv start_postgres.sh postgresql/"
        sh "mv supervisord.conf postgresql/"
        sh "mv wordpress/scripts ."
        sh "mv wordpress/Dockerfile ."
        def app10 = docker.build("vedarth/wordpress")
        sh "mv Dockerfile wordpress/"
        sh "mv scripts wordpress/"
        }
    }
}